type UpdateInfo = record {
    "owner": principal;
    "period": opt nat;
    "func": text;
    "schedule": opt Schedule;
    "canister": principal;
    "args": opt vec nat8;
};

type Message = record {
    "owner": principal;
    "time": nat;
    "canister": principal;
    "func": text;
    "args": opt vec nat8;
};

type Metadata = record {
    "logo": text;
    "name": text;
    "symbol": text;
    "decimals": nat8;
    "totalSupply": nat;
    "owner": principal;
    "fee": nat;
};

type TxRecord = record {
    "caller": principal;
    "op": Operation;
    "index": nat;
    "from": principal;
    "to": principal;
    "amount": nat;
    "fee": nat;
    "timestamp": nat;
    "status": TransactionStatus;
};

type TransferArgs = record {
    "memo": nat64;
    "amount": Tokens;
    "fee": Tokens;
    "from_subaccount": opt vec nat8;
    "to": vec nat8;
    "created_at_time": opt TimeStamp;
};

type AccountBalanceArgs = record {
    "account": vec nat8;
};

type TransferFeeArg = record {
    
};

type GetBlocksArgs = record {
    "start": nat64;
    "length": nat64;
};

type Tokens = record {
    "e8s": nat64;
};

type TransferFee = record {
    "transfer_fee": Tokens;
};

type QueryBlocksResponse = record {
    "chain_length": nat64;
    "certificate": opt vec nat8;
    "blocks": vec Block;
    "first_block_index": nat64;
    "archived_blocks": vec record { "start": nat64; "length": nat64; "callback": QueryArchiveFn; };
};

type SymbolResult = record {
    "symbol": text;
};

type NameResult = record {
    "name": text;
};

type DecimalsResult = record {
    "decimals": nat32;
};

type Archives = record {
    "archives": vec Archive;
};

type StableLists = record {
    "registryList": vec RegistryListItem;
    "messageRegistryList": vec MessageRegistryListItem;
    "allowedPulsesList": vec AllowedPulsesListItem;
    "pulseLedgerList": vec PulseLedgerListItem;
    "burnedPulsesList": vec BurnedPulsesListItem;
    "lastUpdatedList": vec LastUpdatedListItem;
};

type Schedule = record {
    "dom": opt nat8;
    "month": opt nat8;
    "dow": opt nat8;
    "hour": nat8;
    "minute": nat8;
};

type TimeStamp = record {
    "timestamp_nanos": nat64;
};

type Block = record {
    "parent_hash": opt vec nat8;
    "transaction": Transaction;
    "timestamp": TimeStamp;
};

type Transaction = record {
    "memo": nat64;
    "operation": opt Operation;
    "created_at_time": TimeStamp;
};

type Archive = record {
    "canister_id": principal;
};

type RegistryListItem = record {
    "key": text;
    "value": vec UpdateInfo;
};

type MessageRegistryListItem = record {
    "key": text;
    "value": vec Message;
};

type AllowedPulsesListItem = record {
    "key": text;
    "value": nat;
};

type PulseLedgerListItem = record {
    "key": text;
    "value": nat;
};

type BurnedPulsesListItem = record {
    "key": text;
    "value": nat;
};

type LastUpdatedListItem = record {
    "key": text;
    "value": vec nat;
};

type BlockRange = record {
    "blocks": vec Block;
};

type TxReceipt = variant { "Ok": nat; "Err": variant { "InsufficientAllowance": null; "InsufficientBalance": null; "ErrorOperationStyle": null; "Unauthorized": null; "LedgerTrap": null; "ErrorTo": null; "Other": text; "BlockUsed": null; "AmountTooSmall": null } };

type TransferResult = variant { "Ok": nat64; "Err": TransferError };

type QueryArchiveResult = variant { "Ok": BlockRange; "Err": QueryArchiveError };

type TransferError = variant { "BadFee": record { "expected_fee": Tokens; }; "InsufficientFunds": record { "balance": Tokens; }; "TxTooOld": record { "allowed_window_nanos": nat64; }; "TxCreatedInFuture": null; "TxDuplicate": record { "duplicate_of": nat64; } };

type Operation = variant { "Mint": record { "to": vec nat8; "amount": Tokens; }; "Burn": record { "from": vec nat8; "amount": Tokens; }; "Transfer": record { "from": vec nat8; "to": vec nat8; "amount": Tokens; "fee": Tokens; } };

type QueryArchiveError = variant { "BadFirstBlockIndex": record { "requested_index": nat64; "first_valid_index": nat64; }; "Other": record { "error_code": nat64; "error_message": text; } };

type TransactionStatus = variant { "succeeded": null; "failed": null };

type QueryArchiveFn = func (GetBlocksArgs) -> (QueryArchiveResult) query;

service: () -> {
    "get_one": (nat32) -> (UpdateInfo) query;
    "get_count": () -> (nat32) query;
    "get_all": () -> (vec UpdateInfo) query;
    "get_next_update_time": (nat32) -> (nat) query;
    "get_one_message": (nat32) -> (Message) query;
    "get_message_count": () -> (nat32) query;
    "get_messages": () -> (vec Message) query;
    "is_owner": () -> (bool) query;
    "get_pulse_price": () -> (nat) query;
    "get_account_id": () -> (text) query;
    "get_burned_pulses": () -> (nat) query;
    "getDisplayTime": () -> (text) query;
    "getNow": () -> (nat) query;
    "getNowSeconds": () -> (nat32) query;
    "whoami": () -> (principal) query;
    "get_total_heartbeats": () -> (nat) query;
    "get_total_messages": () -> (nat) query;
    "get_total_burned_pulses": () -> (nat) query;
    "get_total_pulses": () -> (nat) query;
    "logo": () -> (text) query;
    "name": () -> (text) query;
    "symbol": () -> (text) query;
    "decimals": () -> (nat8) query;
    "totalSupply": () -> (nat) query;
    "myBalance": () -> (nat) query;
    "balanceOf": (principal) -> (nat) query;
    "allowance": (principal, principal) -> (nat) query;
    "getMetadata": () -> (Metadata) query;
    "historySize": () -> (nat) query;
    "getTransaction": (nat) -> (TxRecord) query;
    "getTransactions": (nat, nat) -> (vec TxRecord) query;
    "getUserTransactions": (principal, nat, nat) -> (vec TxRecord) query;
    "getUserTransactionAmount": (principal) -> (nat) query;
    "add_period": (principal, nat, text) -> (nat32);
    "add_weekly_schedule": (principal, nat8, nat8, nat8, text) -> (nat32);
    "add_daily_schedule": (principal, nat8, nat8, text) -> (nat32);
    "add_monthly_schedule": (principal, nat8, nat8, nat8, text) -> (nat32);
    "add_yearly_schedule": (principal, nat8, nat8, nat8, nat8, text) -> (nat32);
    "remove": (nat32) -> ();
    "add_message": (principal, nat, text, opt vec nat8) -> (nat32);
    "remove_message": (nat32) -> (nat32);
    "set_owner": (principal) -> (principal);
    "set_pulse_price": (nat) -> (nat);
    "set_pulse_cost": (nat) -> (nat);
    "set_check_cost": (nat) -> (nat);
    "set_account_id": (text) -> (text);
    "mint_pulses": (nat) -> (record { "ok": opt nat; "err": opt text; });
    "mint_pulses_for": (nat, principal) -> (nat);
    "transfer": (principal, nat) -> (TxReceipt);
    "transferFrom": (principal, principal, nat) -> (TxReceipt);
    "approve": (principal, nat) -> (TxReceipt);
    "mint": (principal, nat) -> (TxReceipt);
    "burn": (principal, nat) -> (TxReceipt);
    "setName": (text) -> ();
    "setLogo": (text) -> ();
    "setFee": (nat) -> ();
    "setFeeTo": (principal) -> ();
    "setOwner": (principal) -> ();
}